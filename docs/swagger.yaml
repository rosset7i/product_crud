basePath: /
definitions:
  dto.CreateProductRequest:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  dto.UpdateProductRequest:
    properties:
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  webserver.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:7000
info:
  contact:
    email: support@swagger.io
    name: Zippy API Support
    url: http://www.swagger.io/support
  description: |-
    Zippy is an API for managing users and products.
    It provides authentication endpoints and a product catalog with CRUD operations.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Zippy API
  version: "1.0"
paths:
  /products:
    delete:
      consumes:
      - application/json
      description: Permanently delete a product by its ID
      parameters:
      - description: Product ID (UUID)
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            type: string
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of products with optional sorting
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: pageNumber
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      - description: 'Sort order: asc or desc (default: asc)'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
      security:
      - Bearer: []
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with a name and price
      parameters:
      - description: Product creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update product details (name and price)
      parameters:
      - description: Product update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing product
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a single product by its ID
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
      security:
      - Bearer: []
      summary: Get product by ID
      tags:
      - products
  /users/login:
    post:
      consumes:
      - application/json
      description: Validates user credentials and returns a JWT token
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
      summary: Authenticate a user
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user with name, email, and password
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/webserver.ErrorResponse'
      summary: Register a new user
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
